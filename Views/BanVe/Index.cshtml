@model CinemaManagement.ViewModels.BanVeViewModel
@{
    ViewData["Title"] = "Bán Vé - Chọn Phim";
}

<div class="row">
    <div class="col-12">
        <div class="card fade-in">
            <div class="card-header">
                <h4 class="mb-0">
                    <i class="fas fa-ticket-alt me-2"></i>
                    Bán Vé - Chọn Phim và Lịch Chiếu
                </h4>
            </div>
            <div class="card-body">
                <div class="row" style="height: 70vh;">
                    <!-- Danh sách phim -->
                    <div class="col-md-4 d-flex flex-column">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 class="mb-0">
                                <i class="fas fa-film me-2"></i>
                                Danh Sách Phim
                            </h5>
                            <span class="badge bg-primary" id="movieCount">@Model.DanhSachPhim.Count phim</span>
                        </div>
                        
                        <!-- Tìm kiếm phim -->
                        <div class="mb-3">
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-search"></i>
                                </span>
                                <input type="text" class="form-control" id="searchMovie" placeholder="Tìm kiếm phim...">
                                <button class="btn btn-outline-secondary" type="button" id="clearSearch">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Danh sách phim với scroll -->
                        <div class="flex-grow-1 overflow-auto movie-list-container">
                            <div class="list-group" id="movieList">
                                @foreach (var phim in Model.DanhSachPhim)
                                {
                                    <a href="#" class="list-group-item list-group-item-action movie-item" 
                                       data-movie-id="@phim.MaPhim" 
                                       data-movie-name="@phim.TenPhim.ToLower()"
                                       data-movie-genre="@phim.TheLoai.ToLower()">
                                        <div class="d-flex">
                                            <img src="@phim.ViTriFilePhim" alt="@phim.TenPhim" class="movie-poster me-3" 
                                                 onerror="this.src='/images/movie-placeholder.svg'">
                                            <div class="flex-grow-1">
                                                <h6 class="mb-1 movie-title">@phim.TenPhim</h6>
                                                <p class="mb-1 text-muted movie-genre">
                                                    <i class="fas fa-tag me-1"></i>@phim.TheLoai
                                                </p>
                                                <small class="text-muted">
                                                    <i class="fas fa-clock me-1"></i>@phim.ThoiLuong phút |
                                                    <i class="fas fa-star me-1"></i>@phim.DoTuoiPhanAnh
                                                </small>
                                            </div>
                                        </div>
                                    </a>
                                }
                            </div>
                            
                            <!-- Thông báo không tìm thấy -->
                            <div id="noMoviesFound" class="text-center text-muted py-4" style="display: none;">
                                <i class="fas fa-search fa-2x mb-2"></i>
                                <p>Không tìm thấy phim nào</p>
                            </div>
                        </div>
                    </div>

                    <!-- Lịch chiếu -->
                    <div class="col-md-8 d-flex flex-column">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 class="mb-0">
                                <i class="fas fa-calendar-alt me-2"></i>
                                Lịch Chiếu
                                <span id="selectedMovieTitle" class="text-muted small"></span>
                            </h5>
                            <!-- Bộ lọc thời gian -->
                            <div class="d-flex gap-2 align-items-center" id="dateFilter">
                                <small class="text-muted me-2">Lọc theo ngày:</small>
                                <div class="input-group input-group-sm" style="width: 140px;">
                                    <span class="input-group-text"><i class="fas fa-calendar"></i></span>
                                    <input type="date" class="form-control" id="fromDate" title="Từ ngày" placeholder="Từ ngày">
                                </div>
                                <span class="text-muted">-</span>
                                <div class="input-group input-group-sm" style="width: 140px;">
                                    <span class="input-group-text"><i class="fas fa-calendar"></i></span>
                                    <input type="date" class="form-control" id="toDate" title="Đến ngày" placeholder="Đến ngày">
                                </div>
                                <button type="button" class="btn btn-sm btn-outline-secondary" id="clearFilter" title="Xóa bộ lọc">
                                    <i class="fas fa-times"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-primary" id="applyFilter" title="Áp dụng bộ lọc">
                                    <i class="fas fa-filter"></i>
                                </button>
                            </div>
                        </div>
                        
                        <!-- Container lịch chiếu -->
                        <div class="flex-grow-1 schedule-container">
                            <div id="scheduleContainer">
                                <div class="text-center text-muted py-5">
                                    <i class="fas fa-hand-pointer fa-3x mb-3"></i>
                                    <p>Vui lòng chọn phim để xem lịch chiếu</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            var currentMovieId = null;
            var currentMovieName = '';

            // Xử lý tìm kiếm phim
            $('#searchMovie').on('input', function() {
                var searchTerm = $(this).val().toLowerCase().trim();
                filterMovies(searchTerm);
            });

            // Xử lý xóa tìm kiếm
            $('#clearSearch').click(function() {
                $('#searchMovie').val('');
                filterMovies('');
            });

            function filterMovies(searchTerm) {
                var visibleCount = 0;
                
                $('.movie-item').each(function() {
                    var movieName = $(this).data('movie-name') || '';
                    var movieGenre = $(this).data('movie-genre') || '';
                    
                    if (searchTerm === '' || 
                        movieName.includes(searchTerm) || 
                        movieGenre.includes(searchTerm)) {
                        $(this).show();
                        visibleCount++;
                    } else {
                        $(this).hide();
                    }
                });
                
                // Cập nhật số lượng và hiển thị thông báo
                $('#movieCount').text(visibleCount + ' phim');
                
                if (visibleCount === 0 && searchTerm !== '') {
                    $('#noMoviesFound').show();
                } else {
                    $('#noMoviesFound').hide();
                }
            }

            // Xử lý chọn phim
            $('.movie-item').click(function(e) {
                e.preventDefault();
                
                // Highlight phim được chọn
                $('.movie-item').removeClass('active');
                $(this).addClass('active');
                
                currentMovieId = $(this).data('movie-id');
                currentMovieName = $(this).find('.movie-title').text();
                
                $('#selectedMovieTitle').text('- ' + currentMovieName);
                $('#dateFilter').show();
                
                // Thiết lập ngày mặc định nếu chưa có
                if (!$('#fromDate').val() && !$('#toDate').val()) {
                    setDefaultDates();
                }
                
                loadSchedule(currentMovieId);
            });

            // Xử lý thay đổi bộ lọc thời gian
            $('#fromDate, #toDate').change(function() {
                if (currentMovieId) {
                    loadSchedule(currentMovieId);
                }
            });

            // Xử lý nút áp dụng bộ lọc
            $('#applyFilter').click(function() {
                if (currentMovieId) {
                    loadSchedule(currentMovieId);
                }
            });

            // Xử lý xóa bộ lọc
            $('#clearFilter').click(function() {
                $('#fromDate').val('');
                $('#toDate').val('');
                if (currentMovieId) {
                    loadSchedule(currentMovieId);
                }
            });

            // Thiết lập ngày mặc định (hôm nay và 7 ngày tiếp theo)
            function setDefaultDates() {
                var today = new Date();
                var nextWeek = new Date();
                nextWeek.setDate(today.getDate() + 7);
                
                $('#fromDate').val(today.toISOString().split('T')[0]);
                $('#toDate').val(nextWeek.toISOString().split('T')[0]);
            }

            // Xử lý nút mở rộng khoảng thời gian
            $(document).on('click', '#expandDateRange', function() {
                var today = new Date();
                var nextMonth = new Date();
                nextMonth.setMonth(today.getMonth() + 1);
                
                $('#fromDate').val(today.toISOString().split('T')[0]);
                $('#toDate').val(nextMonth.toISOString().split('T')[0]);
                
                if (currentMovieId) {
                    loadSchedule(currentMovieId);
                }
            });

            // Load lịch chiếu theo phim
            function loadSchedule(movieId) {
                $('#scheduleContainer').html('<div class="text-center py-3"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Đang tải...</span></div></div>');
                
                var params = { maPhim: movieId };
                var fromDate = $('#fromDate').val();
                var toDate = $('#toDate').val();
                
                if (fromDate) {
                    params.tuNgay = fromDate;
                }
                if (toDate) {
                    params.denNgay = toDate;
                }
                
                $.get('@Url.Action("GetLichChieuByPhim", "BanVe")', params)
                    .done(function(data) {
                        console.log('Received schedule data:', data);
                        
                        if (!data || data.length === 0) {
                            var message = 'Không có suất chiếu nào';
                            var suggestion = '';
                            
                            if (fromDate || toDate) {
                                message += ' trong khoảng thời gian đã chọn';
                                suggestion = '<div class="mt-3"><button class="btn btn-outline-primary btn-sm" id="expandDateRange"><i class="fas fa-calendar-plus me-1"></i>Mở rộng khoảng thời gian</button></div>';
                            } else {
                                message += ' cho phim này';
                                suggestion = '<div class="mt-3"><button class="btn btn-outline-primary btn-sm" onclick="setDefaultDates(); loadSchedule(currentMovieId);"><i class="fas fa-calendar-week me-1"></i>Xem lịch chiếu 7 ngày tới</button></div>';
                            }
                            
                            $('#scheduleContainer').html(
                                '<div class="text-center text-muted py-5">' +
                                '<i class="fas fa-calendar-times fa-3x mb-3 text-warning"></i>' +
                                '<h5 class="text-muted">' + message + '</h5>' +
                                '<p class="text-muted">Vé có thể chưa được phát hành hoặc đã bán hết.<br>Hãy thử chọn phim khác hoặc thay đổi thời gian.</p>' +
                                suggestion +
                                '</div>'
                            );
                            return;
                        }

                        var html = '<div class="schedule-grid">';
                        var totalShows = data.length;
                        
                        // Thêm thông tin tổng quan
                        html += '<div class="mb-3 p-3 bg-light rounded border-start border-primary border-4">';
                        html += '<div class="d-flex justify-content-between align-items-center">';
                        html += '<div>';
                        html += '<h6 class="mb-1 text-primary"><i class="fas fa-info-circle me-2"></i>Tìm thấy ' + totalShows + ' suất chiếu</h6>';
                        if (fromDate || toDate) {
                            var rangeText = '';
                            if (fromDate && toDate) {
                                rangeText = 'từ ' + formatDateForDisplay(fromDate) + ' đến ' + formatDateForDisplay(toDate);
                            } else if (fromDate) {
                                rangeText = 'từ ' + formatDateForDisplay(fromDate);
                            } else if (toDate) {
                                rangeText = 'đến ' + formatDateForDisplay(toDate);
                            }
                            html += '<small class="text-muted">Khoảng thời gian: ' + rangeText + '</small>';
                        }
                        html += '</div>';
                        html += '<div>';
                        html += '<button class="btn btn-sm btn-outline-secondary" onclick="$(\'#scheduleContainer\')[0].scrollIntoView({behavior: \'smooth\'});"><i class="fas fa-arrow-down me-1"></i>Xem tất cả</button>';
                        html += '</div>';
                        html += '</div>';
                        html += '</div>';
                        
                        // Group by date
                        var groupedData = {};
                        data.forEach(function(item, index) {
                            try {
                                console.log('Processing item', index, ':', item);
                                var dateObj = parseDateTime(item.thoiGianBatDau);
                                var date = formatDate(dateObj);
                                
                                if (!groupedData[date]) {
                                    groupedData[date] = [];
                                }
                                groupedData[date].push(item);
                            } catch (error) {
                                console.error('Error processing schedule item:', item, error);
                            }
                        });

                        console.log('Grouped data:', groupedData);

                        // Display grouped data
                        var sortedDates = Object.keys(groupedData).sort(function(a, b) {
                            // Extract date part for comparison
                            var dateA = a.split(', ')[1] || a;
                            var dateB = b.split(', ')[1] || b;
                            return new Date(dateA.split('/').reverse().join('-')).getTime() - 
                                   new Date(dateB.split('/').reverse().join('-')).getTime();
                        });

                        sortedDates.forEach(function(date) {
                            html += '<div class="date-section mb-4">';
                            html += '<div class="date-header d-flex align-items-center mb-3">';
                            html += '<h6 class="mb-0 me-3"><i class="fas fa-calendar-day me-2 text-primary"></i>' + date + '</h6>';
                            html += '<div class="flex-grow-1"><hr class="my-0"></div>';
                            html += '<span class="badge bg-primary ms-3">' + groupedData[date].length + ' suất</span>';
                            html += '</div>';
                            html += '<div class="schedule-row">';
                            
                            // Sort schedules by time within each date
                            var sortedSchedules = groupedData[date].sort(function(a, b) {
                                var timeA = parseDateTime(a.thoiGianBatDau);
                                var timeB = parseDateTime(b.thoiGianBatDau);
                                return timeA.getTime() - timeB.getTime();
                            });
                            
                            sortedSchedules.forEach(function(schedule) {
                                try {
                                    var timeObj = parseDateTime(schedule.thoiGianBatDau);
                                    var time = formatTime(timeObj);
                                    var endTimeObj = parseDateTime(schedule.thoiGianKetThuc);
                                    var endTime = formatTime(endTimeObj);
                                    
                                    // Determine availability status
                                    var availabilityClass = '';
                                    var availabilityText = '';
                                    var isLowStock = false;
                                    
                                    if (schedule.soVeConLai && schedule.tongSoVe) {
                                        var percentage = (schedule.soVeConLai / schedule.tongSoVe) * 100;
                                        if (percentage <= 20) {
                                            availabilityClass = 'border-warning';
                                            isLowStock = true;
                                        }
                                        availabilityText = schedule.soVeConLai + '/' + schedule.tongSoVe + ' vé';
                                    }
                                    
                                    html += '<div class="schedule-card-wrapper">';
                                    html += '<div class="card schedule-item ' + availabilityClass + '" data-schedule-id="' + schedule.maLichChieu + '">';
                                    
                                    // Low stock indicator
                                    if (isLowStock) {
                                        html += '<div class="position-absolute top-0 end-0 m-2">';
                                        html += '<span class="badge bg-warning text-dark"><i class="fas fa-exclamation-triangle me-1"></i>Sắp hết</span>';
                                        html += '</div>';
                                    }
                                    
                                    html += '<div class="card-body p-3">';
                                    html += '<div class="d-flex justify-content-between align-items-start mb-2">';
                                    html += '<div class="flex-grow-1">';
                                    html += '<h6 class="mb-1 text-primary schedule-time">' + time + ' - ' + endTime + '</h6>';
                                    html += '<div class="d-flex align-items-center mb-1">';
                                    html += '<i class="fas fa-door-open me-1 text-muted"></i>';
                                    html += '<span class="me-2">' + schedule.tenPhong + '</span>';
                                    html += '<span class="badge bg-light text-dark">' + schedule.loaiPhong + '</span>';
                                    html += '</div>';
                                    
                                    // Show ticket availability
                                    if (availabilityText) {
                                        html += '<div class="d-flex align-items-center mt-1">';
                                        html += '<i class="fas fa-ticket-alt me-1 text-success"></i>';
                                        html += '<small class="text-success fw-medium">' + availabilityText + '</small>';
                                        html += '</div>';
                                    }
                                    
                                    html += '</div>';
                                    html += '<button class="btn btn-sm btn-primary select-schedule" data-schedule-id="' + schedule.maLichChieu + '" title="Chọn suất chiếu này">';
                                    html += '<i class="fas fa-arrow-right"></i>';
                                    html += '</button>';
                                    html += '</div>';
                                    html += '<div class="card-footer bg-light p-2 text-center">';
                                    html += '<span class="fw-bold text-success">' + formatCurrency(schedule.gia) + '</span>';
                                    html += '</div>';
                                    html += '</div>';
                                    html += '</div>';
                                } catch (error) {
                                    console.error('Error rendering schedule:', schedule, error);
                                }
                            });
                            
                            html += '</div>';
                            html += '</div>';
                        });
                        
                        html += '</div>';
                        $('#scheduleContainer').html(html);
                    })
                    .fail(function(xhr, status, error) {
                        console.error('Failed to load schedule:', {
                            status: status,
                            error: error,
                            response: xhr.responseText
                        });
                        
                        var errorMessage = 'Lỗi khi tải lịch chiếu';
                        if (xhr.status === 404) {
                            errorMessage = 'Không tìm thấy lịch chiếu cho phim này';
                        } else if (xhr.status === 500) {
                            errorMessage = 'Lỗi server. Vui lòng thử lại sau';
                        } else if (xhr.status === 0) {
                            errorMessage = 'Không thể kết nối đến server';
                        }
                        
                        $('#scheduleContainer').html(
                            '<div class="alert alert-danger text-center">' +
                            '<i class="fas fa-exclamation-triangle me-2"></i>' + errorMessage +
                            '<br><small class="mt-2 d-block">Mã lỗi: ' + xhr.status + '</small>' +
                            '<button class="btn btn-sm btn-outline-danger mt-2" onclick="if(currentMovieId) loadSchedule(currentMovieId);">' +
                            '<i class="fas fa-redo me-1"></i>Thử lại' +
                            '</button>' +
                            '</div>'
                        );
                    });
            }

            // Xử lý chọn lịch chiếu
            $(document).on('click', '.select-schedule', function(e) {
                e.stopPropagation();
                var scheduleId = $(this).data('schedule-id');
                
                // Hiệu ứng loading
                $(this).html('<i class="fas fa-spinner fa-spin"></i>');
                
                window.location.href = '@Url.Action("ChonGhe", "BanVe")/' + scheduleId;
            });

            // Xử lý click vào card lịch chiếu
            $(document).on('click', '.schedule-item', function() {
                $(this).find('.select-schedule').click();
            });

            // Utility functions
            function parseDateTime(dateTimeString) {
                try {
                    // Expected format: "dd/MM/yyyy HH:mm"
                    var parts = dateTimeString.split(' ');
                    if (parts.length !== 2) {
                        console.error('Invalid datetime format:', dateTimeString);
                        return new Date();
                    }
                    
                    var dateParts = parts[0].split('/');
                    var timeParts = parts[1].split(':');
                    
                    if (dateParts.length !== 3 || timeParts.length !== 2) {
                        console.error('Invalid date/time parts:', dateTimeString);
                        return new Date();
                    }
                    
                    // Parse: day, month, year, hour, minute
                    var day = parseInt(dateParts[0], 10);
                    var month = parseInt(dateParts[1], 10) - 1; // Month is 0-indexed
                    var year = parseInt(dateParts[2], 10);
                    var hour = parseInt(timeParts[0], 10);
                    var minute = parseInt(timeParts[1], 10);
                    
                    return new Date(year, month, day, hour, minute);
                } catch (error) {
                    console.error('Error parsing datetime:', dateTimeString, error);
                    return new Date();
                }
            }

            function formatDate(date) {
                try {
                    var days = ['Chủ nhật', 'Thứ hai', 'Thứ ba', 'Thứ tư', 'Thứ năm', 'Thứ sáu', 'Thứ bảy'];
                    var dayName = days[date.getDay()];
                    var day = date.getDate().toString().padStart(2, '0');
                    var month = (date.getMonth() + 1).toString().padStart(2, '0');
                    var year = date.getFullYear();
                    
                    // Check if today
                    var today = new Date();
                    var isToday = date.toDateString() === today.toDateString();
                    
                    // Check if tomorrow
                    var tomorrow = new Date(today);
                    tomorrow.setDate(tomorrow.getDate() + 1);
                    var isTomorrow = date.toDateString() === tomorrow.toDateString();
                    
                    if (isToday) {
                        return 'Hôm nay, ' + day + '/' + month + '/' + year;
                    } else if (isTomorrow) {
                        return 'Ngày mai, ' + day + '/' + month + '/' + year;
                    } else {
                        return dayName + ', ' + day + '/' + month + '/' + year;
                    }
                } catch (error) {
                    console.error('Error formatting date:', date, error);
                    return 'Invalid Date';
                }
            }

            function formatTime(date) {
                try {
                    var hours = date.getHours().toString().padStart(2, '0');
                    var minutes = date.getMinutes().toString().padStart(2, '0');
                    return hours + ':' + minutes;
                } catch (error) {
                    console.error('Error formatting time:', date, error);
                    return 'Invalid Time';
                }
            }

            // Format currency
            function formatCurrency(amount) {
                try {
                    // Ensure amount is a number
                    var numAmount = parseFloat(amount);
                    if (isNaN(numAmount)) {
                        console.warn('Invalid amount for currency formatting:', amount);
                        return '0 ₫';
                    }
                    
                    return new Intl.NumberFormat('vi-VN', {
                        style: 'currency',
                        currency: 'VND',
                        minimumFractionDigits: 0,
                        maximumFractionDigits: 0
                    }).format(numAmount);
                } catch (error) {
                    console.error('Error formatting currency:', amount, error);
                    // Fallback formatting
                    return parseInt(amount).toLocaleString('vi-VN') + ' ₫';
                }
            }

            // Format date for display (from input date)
            function formatDateForDisplay(dateString) {
                try {
                    var date = new Date(dateString);
                    var day = date.getDate().toString().padStart(2, '0');
                    var month = (date.getMonth() + 1).toString().padStart(2, '0');
                    var year = date.getFullYear();
                    return day + '/' + month + '/' + year;
                } catch (error) {
                    console.error('Error formatting date for display:', dateString, error);
                    return dateString;
                }
            }

            // Khởi tạo tooltip
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>
    
    <style>
        /* Scrollbar styling */
        .overflow-auto::-webkit-scrollbar {
            width: 8px;
        }
        
        .overflow-auto::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }
        
        .overflow-auto::-webkit-scrollbar-thumb {
            background: var(--primary-color);
            border-radius: 4px;
        }
        
        .overflow-auto::-webkit-scrollbar-thumb:hover {
            background: var(--dark-blue);
        }

        /* Movie item styling */
        .movie-item {
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }
        
        .movie-item:hover {
            border-color: var(--light-blue);
            transform: translateX(5px);
        }
        
        .movie-item.active {
            border-color: var(--primary-color);
            background-color: var(--light-blue);
        }
        
        .movie-poster {
            width: 60px;
            height: 90px;
            object-fit: cover;
            border-radius: 6px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
        }

        /* Container height synchronization */
        .movie-list-container,
        .schedule-container {
            max-height: calc(70vh - 160px);
            min-height: calc(70vh - 160px);
            overflow-y: auto;
        }
        
        .movie-list-container {
            border-right: 2px solid #dee2e6;
            padding-right: 15px;
            background: linear-gradient(to bottom, #f8f9fa 0%, #ffffff 100%);
            border-radius: 8px 0 0 8px;
        }
        
        .schedule-container {
            padding-left: 15px;
            background: linear-gradient(to bottom, #ffffff 0%, #f8f9fa 100%);
            border-radius: 0 8px 8px 0;
        }

        /* Enhanced scrollbar for containers */
        .movie-list-container::-webkit-scrollbar,
        .schedule-container::-webkit-scrollbar {
            width: 6px;
        }
        
        .movie-list-container::-webkit-scrollbar-thumb,
        .schedule-container::-webkit-scrollbar-thumb {
            background: linear-gradient(180deg, var(--primary-color), var(--secondary-color));
            border-radius: 3px;
        }
        
        .movie-list-container::-webkit-scrollbar-track,
        .schedule-container::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 3px;
        }

        /* Search input styling */
        #searchMovie {
            border-radius: 8px;
        }
        
        #searchMovie:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(0, 119, 190, 0.25);
        }

        /* Date filter styling */
        #dateFilter {
            font-size: 0.875rem;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 0.75rem;
            border-radius: 10px;
            border: 1px solid #dee2e6;
            margin-left: 1rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }
        
        #dateFilter:hover {
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
            transform: translateY(-1px);
        }
        
        #dateFilter .input-group-text {
            background-color: var(--light-blue);
            border-color: var(--primary-color);
            color: var(--primary-color);
            font-weight: 500;
        }
        
        #dateFilter .form-control {
            border-color: var(--primary-color);
            font-size: 0.875rem;
        }
        
        #dateFilter .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(0, 119, 190, 0.25);
        }
        
        #dateFilter .btn {
            transition: all 0.3s ease;
        }
        
        #dateFilter .btn:hover {
            transform: scale(1.05);
        }
        
        #dateFilter small {
            font-weight: 600;
            color: var(--primary-color);
        }
        
        /* Schedule grid layout */
        .schedule-grid {
            padding: 0;
        }

        .date-section {
            margin-bottom: 2rem;
        }

        .date-header h6 {
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--primary-color);
            white-space: nowrap;
        }

        .date-header hr {
            border-color: var(--primary-color);
            opacity: 0.3;
        }

        .schedule-row {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin: 0;
        }

        .schedule-card-wrapper {
            flex: 0 0 auto;
            min-width: 280px;
            max-width: 320px;
        }

        /* Schedule item styling */
        .schedule-item {
            transition: all 0.3s ease;
            cursor: pointer;
            border: 2px solid transparent;
            position: relative;
            overflow: hidden;
            height: 160px;
            display: flex;
            flex-direction: column;
        }
        
        .schedule-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.12);
            border-color: var(--primary-color);
        }

        .schedule-item.border-warning {
            border-color: #ffc107 !important;
        }

        .schedule-item.border-warning:hover {
            border-color: #ffcd39 !important;
            box-shadow: 0 6px 20px rgba(255, 193, 7, 0.3);
        }
        
        .schedule-item .card-body {
            flex: 1;
            position: relative;
            padding: 1rem !important;
        }

        .schedule-item .card-footer {
            transition: all 0.3s ease;
            flex-shrink: 0;
        }
        
        .schedule-item:hover .card-footer {
            background-color: var(--light-blue) !important;
        }

        .schedule-item:hover .select-schedule {
            background-color: var(--secondary-color);
            border-color: var(--secondary-color);
        }

        .schedule-time {
            font-size: 1rem;
            font-weight: 600;
            line-height: 1.2;
        }

        .schedule-item::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
            transform: scaleX(0);
            transition: transform 0.3s ease;
        }

        .schedule-item:hover::before {
            transform: scaleX(1);
        }

        .schedule-item.border-warning::before {
            background: linear-gradient(90deg, #ffc107, #ffcd39);
        }

        /* Ticket availability styling */
        .schedule-item .text-success {
            color: #198754 !important;
        }

        .schedule-item .fw-medium {
            font-weight: 500;
        }

        /* Low stock badge */
        .badge.bg-warning {
            font-size: 0.65rem;
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }

        /* Room info styling */
        .schedule-item .badge {
            font-size: 0.7rem;
            padding: 0.25em 0.5em;
        }

        /* Price styling */
        .schedule-item .card-footer span {
            font-size: 1rem;
            font-weight: 700;
        }

        /* Loading state for schedule cards */
        .schedule-item .select-schedule:disabled {
            opacity: 0.6;
        }

        .select-schedule {
            padding: 0.375rem 0.75rem;
            font-size: 0.875rem;
        }

        /* Empty state styling */
        .text-center.text-muted {
            color: #6c757d !important;
        }

        .text-center.text-muted i {
            opacity: 0.5;
        }

        /* Badge styling */
        .badge {
            font-size: 0.75rem;
        }
        
        /* Loading animation */
        .spinner-border {
            width: 2rem;
            height: 2rem;
        }
        
        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .movie-poster {
                width: 50px;
                height: 75px;
            }
            
            /* Adjust container heights for mobile */
            .movie-list-container,
            .schedule-container {
                max-height: calc(60vh - 100px);
                min-height: calc(60vh - 100px);
            }
            
            .movie-list-container {
                border-right: none;
                border-bottom: 2px solid #dee2e6;
                padding-right: 0;
                padding-bottom: 15px;
                margin-bottom: 15px;
            }
            
            .schedule-container {
                padding-left: 0;
                padding-top: 15px;
            }
            
            #dateFilter {
                flex-direction: column;
                gap: 10px !important;
            }
            
            #dateFilter .input-group {
                width: 100% !important;
            }

            .schedule-row {
                flex-direction: column;
                gap: 0.75rem;
            }

            .schedule-card-wrapper {
                min-width: 100%;
                max-width: 100%;
            }

            .schedule-item {
                height: auto;
                min-height: 120px;
            }

            .schedule-item .card-body {
                padding: 0.75rem !important;
            }

            .schedule-item .select-schedule {
                padding: 0.25rem 0.5rem;
                font-size: 0.8rem;
            }

            .schedule-time {
                font-size: 0.95rem !important;
            }

            .date-header {
                flex-direction: column;
                align-items: flex-start !important;
                gap: 0.5rem;
            }

            .date-header h6 {
                margin-bottom: 0.5rem !important;
            }

            .date-header hr {
                width: 100%;
                margin: 0 !important;
            }

            .date-header .badge {
                align-self: flex-end;
            }
        }

        @@media (max-width: 576px) {
            .schedule-item .d-flex {
                flex-direction: column;
                align-items: flex-start !important;
                gap: 0.5rem;
            }

            .schedule-item .select-schedule {
                align-self: flex-end;
                margin-top: 0.5rem;
            }

            .schedule-card-wrapper {
                min-width: 100%;
            }
        }

        @@media (min-width: 769px) {
            .schedule-row {
                justify-content: flex-start;
            }

            .schedule-card-wrapper {
                flex: 0 0 calc(50% - 0.5rem);
            }
        }

        @@media (min-width: 1200px) {
            .schedule-card-wrapper {
                flex: 0 0 calc(33.333% - 0.67rem);
            }
        }
        
        /* Custom animations */
        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .schedule-item {
            animation: fadeInUp 0.3s ease-out;
            animation-fill-mode: both;
        }

        .schedule-item:nth-child(1) { animation-delay: 0.1s; }
        .schedule-item:nth-child(2) { animation-delay: 0.2s; }
        .schedule-item:nth-child(3) { animation-delay: 0.3s; }
        .schedule-item:nth-child(4) { animation-delay: 0.4s; }
        .schedule-item:nth-child(5) { animation-delay: 0.5s; }
        .schedule-item:nth-child(6) { animation-delay: 0.6s; }

        @@keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .schedule-item:hover .select-schedule {
            animation: pulse 0.6s ease-in-out;
        }

        /* Alert improvements */
        .alert {
            border: none;
            border-radius: 0.5rem;
        }

        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
        }

        /* Badge improvements */
        .badge.bg-primary {
            background-color: var(--primary-color) !important;
        }

        /* Smooth transitions for all interactive elements */
        .btn, .card, .badge, .form-control, .input-group-text {
            transition: all 0.3s ease;
        }
        
        /* Highlight selected movie title */
        #selectedMovieTitle {
            color: var(--primary-color) !important;
            font-weight: 500;
        }
    </style>
}
